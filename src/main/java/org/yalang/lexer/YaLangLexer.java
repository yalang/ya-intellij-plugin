/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.yalang.lexer;

import com.intellij.psi.tree.IElementType;
import org.yalang.YaLangTokenTypes;
//import org.yalang.lexer.YaLangLexerFStringHelper;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>YaLang.flex</tt>
 */
class YaLangLexer implements FlexLexerEx {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int FSTRING = 6;
  public static final int FSTRING_FRAGMENT = 8;
  public static final int FSTRING_FRAGMENT_FORMAT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\10\1\14\1\15\4"+
    "\0\1\16\1\17\1\16\2\20\1\21\3\20\1\21\71\20\1\22\1\20\1\23\1\0\1\24\1\25\2"+
    "\0\16\20\1\26\1\27\1\30\1\31\2\20\1\32\11\20\1\33\21\20\1\32\25\20\1\34\3"+
    "\20\1\21\1\35\1\34\4\20\1\0\1\34\4\20\1\33\1\36\1\0\3\20\2\37\2\0\1\40\1\20"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\2\20\1\50\1\51\14\20\1\52\1\53\1\20\1"+
    "\54\1\55\1\56\2\0\7\20\1\57\14\20\1\23\1\0\1\55\1\60\4\20\1\61\1\16\5\20\1"+
    "\61\2\0\3\20\1\62\10\0\2\20\1\26\1\61\2\0\1\63\1\20\1\32\17\20\1\64\1\55\1"+
    "\34\1\20\1\52\1\53\1\65\2\20\1\54\1\66\1\67\1\53\1\70\1\71\1\72\1\64\1\55"+
    "\1\23\1\0\1\73\1\74\1\65\2\20\1\54\1\75\1\76\1\74\1\77\1\35\1\100\1\101\1"+
    "\55\1\61\1\0\1\73\1\33\1\32\2\20\1\54\1\102\1\67\1\33\1\103\1\104\1\0\1\64"+
    "\1\55\1\0\1\35\1\73\1\53\1\65\2\20\1\54\1\102\1\67\1\53\1\77\1\105\1\72\1"+
    "\64\1\55\1\35\1\0\1\106\1\107\1\110\1\111\1\112\1\107\1\20\1\22\1\107\1\110"+
    "\1\113\1\0\1\101\1\55\2\0\1\52\1\26\1\54\2\20\1\54\1\20\1\114\1\26\1\110\1"+
    "\115\1\37\1\64\1\55\2\0\1\52\1\26\1\54\2\20\1\54\1\52\1\67\1\26\1\110\1\115"+
    "\1\30\1\64\1\55\1\116\1\0\1\73\1\26\1\54\4\20\1\57\1\26\1\117\1\63\1\71\1"+
    "\64\1\55\1\0\1\120\1\106\1\20\1\21\1\120\2\20\1\32\1\121\1\21\1\122\1\123"+
    "\1\20\1\101\1\55\1\124\1\0\1\34\6\20\1\37\1\20\1\21\1\55\1\125\4\0\1\126\1"+
    "\127\1\63\1\34\1\130\1\106\1\20\1\103\1\123\1\61\1\55\1\131\4\0\1\104\2\0"+
    "\1\23\1\55\1\125\1\132\1\133\1\20\1\34\3\20\1\24\1\34\1\20\1\26\2\20\1\34"+
    "\3\20\1\24\1\30\7\0\10\20\1\55\1\125\10\20\1\55\1\134\4\20\1\33\1\17\5\20"+
    "\1\135\51\20\1\110\1\21\1\110\5\20\1\110\4\20\1\110\1\21\1\110\1\20\1\21\7"+
    "\20\1\110\10\20\1\57\4\0\2\20\2\0\12\20\2\61\1\34\114\20\1\53\2\20\1\34\2"+
    "\20\1\37\11\20\1\107\1\20\1\104\1\20\1\26\1\24\1\0\2\20\1\24\1\0\2\20\1\62"+
    "\1\0\1\20\1\26\1\136\1\0\12\20\1\137\1\140\1\55\1\125\3\0\1\141\1\55\1\125"+
    "\13\20\1\0\5\20\1\37\10\20\1\61\1\0\3\20\1\21\1\20\1\62\1\20\1\62\1\101\1"+
    "\55\3\20\1\61\1\24\1\0\5\20\1\62\3\20\1\23\1\55\1\125\4\0\3\20\1\62\7\20\1"+
    "\21\3\20\1\53\1\55\1\125\1\55\1\125\1\71\1\0\1\20\1\21\10\0\11\20\1\62\1\55"+
    "\1\125\1\0\1\142\1\62\1\0\6\20\1\55\1\60\6\20\1\62\1\0\7\20\1\0\1\55\1\143"+
    "\1\55\1\60\3\20\1\61\1\20\1\104\10\0\1\135\3\20\1\21\1\23\36\20\1\61\1\142"+
    "\42\20\2\61\4\20\2\61\1\20\1\144\3\20\1\61\6\20\1\26\1\123\1\145\1\24\1\146"+
    "\1\62\1\20\1\24\1\145\1\24\5\0\1\147\1\0\1\71\1\104\1\0\1\150\3\0\1\35\1\71"+
    "\2\0\1\20\1\24\6\0\4\20\1\104\1\0\1\122\1\120\1\121\1\151\1\25\1\152\1\20"+
    "\1\67\1\153\1\154\2\0\5\20\1\104\144\0\1\105\6\20\1\23\42\0\5\20\1\21\5\20"+
    "\1\21\20\20\1\24\1\142\1\62\1\0\4\20\1\33\1\17\7\20\1\71\1\0\1\71\2\20\1\21"+
    "\1\0\10\21\4\20\5\0\1\71\72\0\1\153\3\0\1\34\1\20\1\151\1\24\1\34\11\20\1"+
    "\21\1\155\1\34\12\20\1\135\1\153\4\20\1\61\1\34\12\20\1\21\2\0\3\20\1\37\6"+
    "\0\170\20\1\61\11\0\72\20\1\61\5\0\21\20\1\24\10\0\5\20\1\61\41\20\1\24\2"+
    "\20\1\55\1\156\2\0\6\20\1\135\1\33\16\20\1\23\3\0\1\71\1\20\1\120\14\20\1"+
    "\65\3\20\1\21\1\20\7\0\1\71\6\20\3\0\6\20\1\62\1\0\10\20\1\61\1\0\1\55\1\125"+
    "\3\20\1\157\1\55\1\60\3\20\1\61\4\20\1\62\1\0\3\20\1\24\10\20\1\104\1\71\1"+
    "\55\1\125\2\20\1\55\1\160\6\20\1\21\1\0\1\20\1\61\1\55\1\125\2\20\1\21\1\120"+
    "\10\20\1\37\2\0\1\141\2\20\1\161\1\0\3\162\1\0\2\21\5\20\1\135\1\61\1\0\17"+
    "\20\1\163\1\55\1\125\64\20\1\62\1\0\2\20\1\21\1\142\5\20\1\62\40\0\55\20\1"+
    "\61\15\20\1\23\4\0\1\21\1\0\1\142\1\153\1\20\1\54\1\21\1\123\1\164\15\20\1"+
    "\23\3\0\1\142\54\20\1\61\2\0\10\20\1\120\6\20\5\0\1\20\1\62\2\20\2\0\2\20"+
    "\1\112\2\0\1\153\4\0\1\26\20\20\1\24\2\0\1\55\1\125\1\34\2\20\1\74\1\34\2"+
    "\20\1\37\1\105\12\20\1\21\3\120\1\165\4\0\1\20\1\52\2\20\1\21\2\20\1\166\1"+
    "\20\1\61\1\20\1\61\4\0\17\20\1\37\10\0\6\20\1\24\20\0\1\17\20\0\3\20\1\24"+
    "\6\20\1\104\1\0\1\104\3\0\4\20\2\0\3\20\1\37\5\20\1\37\3\20\1\61\4\20\1\62"+
    "\1\20\1\151\5\0\23\20\1\61\1\55\1\125\4\20\1\62\4\20\1\62\5\20\1\0\6\20\1"+
    "\62\23\0\46\20\1\21\1\0\2\20\1\61\1\0\1\20\23\0\1\61\1\54\4\20\1\33\1\167"+
    "\2\20\1\61\1\0\2\20\1\21\1\0\3\20\1\21\10\0\2\20\1\163\1\0\2\20\1\61\1\0\3"+
    "\20\1\23\10\0\7\20\1\105\10\0\1\170\1\63\1\52\1\34\2\20\1\62\1\74\4\0\3\20"+
    "\1\24\3\20\1\24\4\0\1\20\1\34\2\20\1\21\3\0\6\20\1\61\1\0\2\20\1\61\1\0\2"+
    "\20\1\37\1\0\2\20\1\23\15\0\11\20\1\104\6\0\6\20\1\37\1\0\6\20\1\37\41\0\10"+
    "\20\1\21\3\0\1\101\1\55\1\0\1\71\7\20\1\37\2\0\3\20\1\104\1\55\1\125\6\20"+
    "\1\171\1\55\2\0\4\20\1\172\1\0\10\20\1\24\1\165\1\55\1\173\4\0\2\20\1\32\4"+
    "\20\1\30\10\0\1\21\1\152\1\20\1\33\1\20\1\104\7\20\1\37\1\55\1\125\1\52\1"+
    "\53\1\65\2\20\1\54\1\102\1\67\1\53\1\77\1\113\1\153\1\146\2\24\21\0\11\20"+
    "\1\37\1\55\1\125\4\0\10\20\1\33\1\0\1\55\1\125\24\0\6\20\1\61\1\20\1\104\2"+
    "\0\1\61\4\0\10\20\1\174\1\0\1\55\1\125\4\0\7\20\1\0\1\55\1\125\6\0\3\20\1"+
    "\114\1\20\1\62\1\55\1\125\54\0\10\20\1\55\1\125\1\0\1\71\70\0\7\20\1\104\40"+
    "\0\1\20\1\54\4\20\1\21\1\20\1\104\1\0\1\55\1\125\2\0\1\120\3\20\1\120\2\20"+
    "\1\34\1\21\51\0\63\20\1\23\14\0\15\20\1\21\2\0\30\20\1\62\27\0\5\20\1\21\72"+
    "\0\10\20\1\21\67\0\7\20\1\104\3\20\1\21\1\55\1\125\14\0\3\20\1\61\1\24\1\0"+
    "\6\20\1\21\1\0\1\62\1\0\1\55\1\125\1\142\2\20\1\153\2\20\56\0\10\20\1\24\1"+
    "\0\5\20\1\21\1\0\1\71\2\20\10\0\1\104\3\0\75\20\1\24\2\0\36\20\1\37\41\0\1"+
    "\23\77\0\15\20\1\37\1\20\1\24\1\20\1\104\1\20\1\175\130\0\1\153\1\114\1\37"+
    "\1\142\1\57\1\62\3\0\1\176\22\0\1\165\67\0\12\20\1\26\10\20\1\26\1\177\1\200"+
    "\1\20\1\201\1\52\7\20\1\33\1\57\2\26\3\20\1\202\1\123\1\120\1\54\51\20\1\61"+
    "\3\20\1\54\2\20\1\135\3\20\1\135\2\20\1\26\3\20\1\26\2\20\1\21\3\20\1\21\3"+
    "\20\1\54\3\20\1\54\2\20\1\135\1\64\6\55\6\20\1\21\1\142\5\20\1\24\1\17\1\0"+
    "\1\150\2\0\1\142\1\34\1\20\52\0\1\21\2\20\1\65\1\164\1\37\72\0\30\20\1\24"+
    "\1\0\1\21\5\0\11\20\1\37\1\55\1\125\24\0\1\52\3\20\1\126\1\34\1\135\1\203"+
    "\1\122\1\204\1\126\1\144\1\126\2\135\1\100\1\20\1\32\1\20\1\62\1\73\1\32\1"+
    "\20\1\62\116\0\3\20\1\23\3\20\1\23\3\20\1\23\16\0\32\20\1\21\5\0\106\20\1"+
    "\24\1\0\33\20\1\61\120\20\1\23\53\0\3\20\1\61\134\0\36\20\2\0");

  /* The ZZ_CMAP_A table has 1064 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\40\1\42\1\124\1\41\1\15\2\0\1\35\1\36\1\31\1\14\2\0\1\107\1\27\1\115"+
    "\1\116\1\103\1\101\1\0\1\23\1\21\1\105\1\6\1\5\6\3\2\4\1\37\1\43\1\113\1\102"+
    "\1\112\1\0\1\104\1\17\1\12\1\26\1\17\1\22\1\17\3\16\1\24\1\16\1\13\1\16\1"+
    "\34\1\11\2\16\1\25\2\16\1\25\2\16\1\7\2\16\1\117\1\30\1\120\1\111\1\10\1\122"+
    "\1\17\1\12\1\26\1\17\1\22\1\17\3\16\1\24\1\16\1\13\2\16\1\11\1\7\2\16\1\32"+
    "\1\110\1\33\1\114\6\0\1\124\4\0\1\16\12\0\1\16\2\0\17\16\1\0\2\16\4\0\4\16"+
    "\6\0\5\16\7\0\1\16\1\0\1\16\1\0\5\16\1\0\2\16\2\0\4\16\1\0\1\16\6\0\1\16\1"+
    "\0\3\16\1\0\1\16\1\0\4\16\1\0\13\16\1\0\1\16\1\0\7\16\1\0\1\16\7\0\2\16\1"+
    "\0\2\16\1\0\4\16\11\0\1\121\3\0\3\16\1\123\4\0\2\16\1\66\1\45\1\16\1\70\1"+
    "\75\1\50\1\73\1\62\1\56\1\77\1\72\1\63\1\67\1\47\1\64\1\52\1\74\1\51\1\16"+
    "\1\53\2\16\1\60\1\71\1\76\6\16\1\55\1\100\1\46\1\65\1\57\1\54\1\16\1\44\1"+
    "\16\1\61\5\16\1\1\11\2\1\106\3\0\6\16\1\0\10\16\2\0\2\16\1\0\6\16\12\20\3"+
    "\16\2\0\4\16\2\0\3\16\2\20\14\16\2\0\4\16\10\0\10\16\2\0\2\20\1\16\2\0\6\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\2\0\4\16\10\0\1\16\4\0\2\16\1\0\1\16\1\0\3\16"+
    "\1\0\6\16\4\0\2\16\1\0\2\16\1\0\2\16\1\0\2\16\2\0\1\16\1\0\3\16\2\0\3\16\3"+
    "\0\4\16\1\0\1\16\7\0\2\20\1\16\1\0\2\16\1\0\5\16\1\0\3\16\2\0\1\16\15\0\2"+
    "\16\2\0\2\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0\1\16\1\0\2\16\3\0\2\16"+
    "\3\0\1\16\6\0\3\16\3\0\3\16\5\0\2\16\2\0\2\16\5\0\1\16\1\0\5\16\3\0\12\16"+
    "\1\0\1\16\4\0\1\16\4\0\6\16\1\0\1\16\3\0\2\16\4\0\2\20\7\0\2\16\1\0\1\16\2"+
    "\0\2\16\1\0\1\16\2\0\1\16\3\0\3\16\1\0\1\16\1\0\1\16\2\20\2\0\4\16\5\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\2\16\2\20\4\16\2\0\3\16\1\0\5\16\1\0\2\16\4\0\4\16"+
    "\3\0\1\16\4\0\2\16\5\0\3\16\5\0\5\16\2\20\3\0\3\16\1\0\1\16\1\0\1\16\1\0\1"+
    "\16\1\0\1\16\2\0\3\16\1\0\6\16\2\0\2\16\2\124\12\0\1\16\4\0\5\16\2\0\1\16"+
    "\1\0\4\16\1\0\1\16\5\0\5\16\4\0\1\16\2\0\2\16\2\0\3\16\2\20\2\16\7\0\1\16"+
    "\1\0\1\16\2\0\2\20\5\16\3\0\5\16\2\0\6\16\1\0\3\16\1\0\2\16\2\0\2\16\1\0\2"+
    "\16\1\0\2\16\2\0\3\16\3\0\3\16\1\0\2\16\1\0\2\16\3\0\1\16\2\0\5\16\1\0\2\16"+
    "\1\0\5\16\1\0\2\20\4\16\2\0\1\16\1\0\2\20\1\16\1\0\1\16\3\0\1\16\3\0\1\16"+
    "\3\0\2\16\3\0\2\16\3\0\4\16\4\0\1\16\2\0\2\16\2\0\4\16\1\0\4\16\1\0\1\16\1"+
    "\0\5\16\1\0\4\16\2\0\1\16\1\0\1\16\5\0\1\16\1\0\1\16\1\0\3\16");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\11\1\12\1\13\1\1\1\14\1\15"+
    "\1\16\1\17\1\20\20\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\44"+
    "\1\45\2\46\1\47\1\3\2\50\1\14\2\51\1\1"+
    "\1\52\2\51\2\0\1\53\1\0\1\54\1\0\2\2"+
    "\4\0\1\3\1\53\1\55\1\56\3\7\1\57\3\7"+
    "\1\60\2\3\1\61\10\3\1\62\2\3\1\63\1\3"+
    "\1\64\4\3\1\65\1\3\1\66\7\3\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\0\3\46"+
    "\1\107\3\46\1\3\6\50\2\0\1\110\2\0\1\51"+
    "\1\52\1\0\1\51\1\53\1\0\1\2\1\0\1\2"+
    "\1\0\1\3\1\0\1\7\1\111\1\112\1\0\1\111"+
    "\1\3\1\113\1\114\4\3\1\115\1\116\2\3\1\117"+
    "\1\3\1\120\2\3\1\121\1\122\1\3\1\123\1\3"+
    "\1\124\4\3\1\125\1\126\1\127\1\130\1\0\1\46"+
    "\1\131\1\132\1\0\1\131\1\3\1\50\2\133\1\51"+
    "\1\0\2\134\1\0\2\3\1\135\2\3\1\136\1\137"+
    "\1\140\2\3\1\141\1\3\1\142\2\3\1\143\1\3"+
    "\1\0\2\132\11\0\1\144\1\145\1\146\1\3\1\147"+
    "\1\150\1\151\1\152\1\153\2\3\6\0\1\111\3\3"+
    "\1\131\1\133\1\134\1\0\1\154\1\155\1\3\1\156"+
    "\1\3\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb"+
    "\0\u01fe\0\u0550\0\u01fe\0\u01fe\0\u01fe\0\u05a5\0\u01fe\0\u01fe"+
    "\0\u01fe\0\u01fe\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e\0\u07a3"+
    "\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6\0\u0a4b"+
    "\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49\0\u0c9e\0\u0cf3"+
    "\0\u0d48\0\u0d9d\0\u0df2\0\u0e47\0\u0e9c\0\u0ef1\0\u01fe\0\u01fe"+
    "\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u01fe\0\u0f46"+
    "\0\u0f9b\0\u0ff0\0\u1045\0\u01fe\0\u109a\0\u10ef\0\u1144\0\u1199"+
    "\0\u11ee\0\u1243\0\u1298\0\u12ed\0\u1342\0\u1397\0\u0253\0\u13ec"+
    "\0\u1441\0\u1496\0\u01fe\0\u14eb\0\u01fe\0\u1540\0\u1595\0\u15ea"+
    "\0\u163f\0\u1694\0\u16e9\0\u173e\0\u01fe\0\u01fe\0\u1793\0\u17e8"+
    "\0\u183d\0\u01fe\0\u1892\0\u18e7\0\u193c\0\u01fe\0\u1991\0\u19e6"+
    "\0\u0352\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39"+
    "\0\u1c8e\0\u0352\0\u1ce3\0\u1d38\0\u0352\0\u1d8d\0\u0352\0\u1de2"+
    "\0\u1e37\0\u1e8c\0\u1ee1\0\u0352\0\u1f36\0\u1f8b\0\u1fe0\0\u2035"+
    "\0\u208a\0\u20df\0\u2134\0\u2189\0\u21de\0\u01fe\0\u01fe\0\u01fe"+
    "\0\u2233\0\u01fe\0\u01fe\0\u2288\0\u01fe\0\u01fe\0\u01fe\0\u01fe"+
    "\0\u01fe\0\u22dd\0\u01fe\0\u01fe\0\u2332\0\u2387\0\u23dc\0\u2431"+
    "\0\u2486\0\u01fe\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f\0\u2684"+
    "\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u282d\0\u1199\0\u01fe\0\u1243"+
    "\0\u1298\0\u2882\0\u28d7\0\u1397\0\u292c\0\u2981\0\u29d6\0\u2a2b"+
    "\0\u2a80\0\u2ad5\0\u2b2a\0\u2b7f\0\u0451\0\u2bd4\0\u2c29\0\u01fe"+
    "\0\u2bd4\0\u2c7e\0\u2cd3\0\u0352\0\u0352\0\u2d28\0\u2d7d\0\u2dd2"+
    "\0\u2e27\0\u0352\0\u0352\0\u2e7c\0\u2ed1\0\u0352\0\u2f26\0\u0352"+
    "\0\u2f7b\0\u2fd0\0\u0352\0\u0352\0\u3025\0\u0352\0\u307a\0\u0352"+
    "\0\u30cf\0\u3124\0\u3179\0\u31ce\0\u01fe\0\u01fe\0\u01fe\0\u01fe"+
    "\0\u3223\0\u3278\0\u32cd\0\u01fe\0\u3278\0\u3322\0\u3377\0\u01fe"+
    "\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f"+
    "\0\u3674\0\u0352\0\u36c9\0\u371e\0\u0352\0\u0352\0\u0352\0\u3773"+
    "\0\u37c8\0\u0352\0\u381d\0\u0352\0\u3872\0\u38c7\0\u0352\0\u391c"+
    "\0\u3971\0\u39c6\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4"+
    "\0\u3c19\0\u3520\0\u3575\0\u3c6e\0\u0352\0\u0352\0\u0352\0\u3cc3"+
    "\0\u0352\0\u0352\0\u0352\0\u0352\0\u0352\0\u3d18\0\u3d6d\0\u3dc2"+
    "\0\u39c6\0\u3a1b\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0"+
    "\0\u4015\0\u3278\0\u01fe\0\u01fe\0\u3f16\0\u01fe\0\u0352\0\u406a"+
    "\0\u0352\0\u40bf\0\u0352";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\3\7\1\12\3\13\1\14\1\13"+
    "\1\15\1\7\2\13\1\7\1\16\1\13\1\17\1\13"+
    "\2\14\1\20\1\21\1\22\1\23\1\24\1\13\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\7\1\33\1\34"+
    "\2\13\1\35\1\13\1\36\1\37\1\13\1\40\1\41"+
    "\1\42\1\13\1\43\1\13\1\44\1\13\1\45\1\46"+
    "\1\13\1\47\1\50\1\13\1\51\1\52\1\13\1\53"+
    "\2\13\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\7\12\77\1\100\1\77"+
    "\1\101\1\0\7\77\2\100\1\102\1\21\1\103\3\77"+
    "\1\25\2\77\1\30\1\31\1\104\61\77\1\0\1\7"+
    "\1\10\1\11\3\7\1\12\3\13\1\105\1\13\1\101"+
    "\1\7\2\13\1\7\1\16\1\13\1\17\1\13\2\105"+
    "\1\106\1\21\1\107\1\23\1\24\1\13\1\25\1\26"+
    "\1\110\1\30\1\31\1\104\1\7\1\33\1\34\2\13"+
    "\1\35\1\13\1\36\1\37\1\13\1\40\1\41\1\42"+
    "\1\13\1\43\1\13\1\44\1\13\1\45\1\46\1\13"+
    "\1\47\1\50\1\13\1\51\1\52\1\13\1\53\2\13"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\7\15\111\1\7\11\111\1\7"+
    "\1\112\1\7\1\113\7\111\1\7\62\111\1\7\1\10"+
    "\1\11\3\7\1\12\3\13\1\105\1\13\1\101\1\7"+
    "\2\13\1\7\1\16\1\13\1\17\1\13\2\105\1\106"+
    "\1\21\1\107\1\23\1\24\1\13\1\25\1\114\1\27"+
    "\1\30\1\31\1\104\1\7\1\33\1\34\2\13\1\35"+
    "\1\13\1\36\1\37\1\13\1\40\1\41\1\42\1\13"+
    "\1\43\1\13\1\44\1\13\1\45\1\46\1\13\1\47"+
    "\1\50\1\13\1\51\1\52\1\13\1\53\2\13\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\7\15\115\1\7\11\115\1\7\1\116"+
    "\3\7\6\115\1\7\62\115\126\0\2\117\5\0\1\120"+
    "\10\0\1\121\1\122\1\0\1\123\101\0\2\11\5\0"+
    "\1\124\2\0\1\125\5\0\1\121\1\122\1\0\1\123"+
    "\103\0\1\126\1\0\2\126\1\127\1\130\1\131\1\132"+
    "\1\125\112\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\35\13\25\0\11\13\1\133"+
    "\1\13\2\0\3\13\1\0\1\13\1\0\1\13\2\133"+
    "\1\20\1\0\1\22\2\0\1\13\7\0\35\13\24\0"+
    "\15\15\1\0\24\15\1\0\62\15\1\0\2\134\224\0"+
    "\1\135\7\0\1\136\12\0\15\137\1\0\11\137\1\140"+
    "\1\141\11\137\1\142\62\137\15\143\1\0\12\143\1\144"+
    "\1\145\10\143\1\142\62\143\102\0\1\146\23\0\13\13"+
    "\2\0\3\13\1\0\1\13\1\0\3\13\5\0\1\13"+
    "\7\0\14\13\1\147\4\13\1\150\13\13\25\0\13\13"+
    "\2\0\3\13\1\0\1\13\1\0\3\13\5\0\1\13"+
    "\7\0\1\151\1\13\1\152\20\13\1\153\11\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\2\13\1\154\2\13\1\155\5\13\1\156"+
    "\21\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\11\13\1\157\23\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\10\13\1\160\6\13\1\161\15\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\15\13\1\162\17\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\6\13\1\163\26\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\6\13\1\164"+
    "\1\13\1\165\6\13\1\166\5\13\1\167\5\13\1\170"+
    "\1\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\5\13\1\171\27\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\4\13\1\172\13\13\1\173\14\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\1\174\1\175\2\13\1\176\30\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\23\13\1\177\11\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\6\13\1\200\12\13\1\201\13\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\4\13\1\202\30\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\15\13\1\203"+
    "\17\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\4\13\1\204\30\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\15\13\1\205\17\13\126\0\1\206\124\0"+
    "\1\207\124\0\1\210\1\211\123\0\1\212\124\0\1\213"+
    "\2\0\1\214\121\0\1\215\124\0\1\216\124\0\1\217"+
    "\124\0\1\220\124\0\1\221\7\0\1\222\114\0\1\223"+
    "\7\0\1\224\1\225\23\0\1\226\12\0\2\226\1\102"+
    "\1\0\1\103\73\0\15\101\1\0\24\101\1\0\62\101"+
    "\15\227\1\0\11\227\1\230\1\231\11\227\1\232\62\227"+
    "\15\233\1\0\12\233\1\234\1\235\10\233\1\232\62\233"+
    "\1\0\11\13\1\236\1\13\2\0\3\13\1\0\1\13"+
    "\1\0\1\13\2\236\1\106\1\0\1\107\2\0\1\13"+
    "\7\0\35\13\24\0\15\237\1\0\11\237\1\240\1\241"+
    "\11\237\1\0\62\237\15\242\1\0\12\242\1\243\1\244"+
    "\10\242\1\0\62\242\14\0\1\245\20\0\1\246\4\0"+
    "\1\247\62\0\15\111\1\0\11\111\1\0\1\250\1\0"+
    "\1\251\7\111\1\0\114\111\2\0\1\252\70\111\32\0"+
    "\1\111\72\0\15\253\1\0\11\253\1\0\1\253\1\0"+
    "\1\253\1\0\1\253\1\0\1\253\2\0\1\253\1\0"+
    "\37\253\1\146\22\253\15\115\1\0\11\115\1\0\1\254"+
    "\3\0\6\115\1\0\114\115\2\0\1\255\70\115\1\0"+
    "\2\117\123\0\2\134\17\0\1\122\1\0\1\123\101\0"+
    "\2\256\20\0\1\257\55\0\1\257\24\0\2\11\125\0"+
    "\1\126\1\0\2\126\1\0\1\130\2\0\1\125\114\0"+
    "\4\260\1\0\1\261\1\0\1\260\4\0\1\260\2\0"+
    "\1\260\3\0\1\260\101\0\1\126\1\0\2\126\121\0"+
    "\1\126\1\0\2\126\1\0\1\130\121\0\2\262\1\0"+
    "\1\263\115\0\11\13\1\264\1\13\2\0\3\13\1\0"+
    "\1\13\1\0\1\13\2\264\1\20\1\0\1\22\2\0"+
    "\1\13\7\0\35\13\25\0\2\134\5\0\1\265\11\0"+
    "\1\122\1\0\1\123\100\0\15\137\1\0\11\137\1\266"+
    "\1\141\11\137\1\142\62\137\27\0\1\267\1\270\4\0"+
    "\1\271\2\0\1\271\1\0\2\142\61\0\125\137\15\143"+
    "\1\0\12\143\1\144\1\266\10\143\1\142\207\143\30\0"+
    "\1\270\1\272\3\0\1\271\2\0\1\271\1\0\2\142"+
    "\62\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\5\0\1\13\7\0\15\13\1\273\17\13\25\0\13\13"+
    "\2\0\3\13\1\0\1\13\1\0\3\13\5\0\1\13"+
    "\7\0\1\274\34\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\3\13\1\275"+
    "\31\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\15\13\1\276\17\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\5\13\1\277\27\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\12\13\1\300\22\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\3\13\1\301"+
    "\31\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\25\13\1\302\7\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\11\13\1\303\23\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\15\13\1\304\17\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\34\13\1\305"+
    "\25\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\5\0\1\13\7\0\6\13\1\306\26\13\25\0\13\13"+
    "\2\0\3\13\1\0\1\13\1\0\3\13\5\0\1\13"+
    "\7\0\7\13\1\307\25\13\25\0\13\13\2\0\3\13"+
    "\1\0\1\13\1\0\3\13\5\0\1\13\7\0\21\13"+
    "\1\310\13\13\25\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\5\0\1\13\7\0\4\13\1\311\30\13"+
    "\25\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\5\0\1\13\7\0\1\312\34\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\11\13\1\313\23\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\10\13\1\314"+
    "\24\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\4\13\1\315\30\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\6\13\1\316\26\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\26\13\1\317\6\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\4\13\1\320"+
    "\30\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\21\13\1\321\13\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\10\13\1\322\24\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\31\13\1\323\3\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\6\13\1\324"+
    "\26\13\126\0\1\325\124\0\1\326\124\0\1\327\124\0"+
    "\1\330\34\0\1\331\12\0\2\331\1\102\1\0\1\103"+
    "\73\0\15\227\1\0\11\227\1\332\1\231\11\227\1\232"+
    "\62\227\27\0\1\333\1\334\4\0\1\335\2\0\1\335"+
    "\1\0\2\232\61\0\125\227\15\233\1\0\12\233\1\234"+
    "\1\332\10\233\1\232\207\233\30\0\1\334\1\336\3\0"+
    "\1\335\2\0\1\335\1\0\2\232\62\0\11\13\1\337"+
    "\1\13\2\0\3\13\1\0\1\13\1\0\1\13\2\337"+
    "\1\106\1\0\1\107\2\0\1\13\7\0\35\13\24\0"+
    "\15\237\1\0\11\237\1\340\1\241\11\237\1\0\62\237"+
    "\27\0\1\341\75\0\125\237\15\242\1\0\12\242\1\243"+
    "\1\340\10\242\1\0\207\242\31\0\1\342\73\0\15\245"+
    "\1\0\24\245\1\247\62\245\15\111\1\0\11\111\1\0"+
    "\1\250\1\0\1\252\7\111\1\0\62\111\15\253\1\0"+
    "\11\253\1\0\1\253\1\0\1\253\1\0\1\253\1\0"+
    "\1\253\2\0\1\253\1\0\37\253\1\0\22\253\15\115"+
    "\1\0\11\115\1\0\1\254\1\0\1\343\1\0\6\115"+
    "\1\0\62\115\1\0\2\256\5\0\1\257\13\0\1\123"+
    "\101\0\2\256\125\0\4\260\1\0\1\261\1\0\1\260"+
    "\1\125\3\0\1\260\2\0\1\260\3\0\1\260\101\0"+
    "\4\260\3\0\1\260\4\0\1\260\2\0\1\260\3\0"+
    "\1\260\103\0\2\262\1\0\1\263\2\0\1\125\116\0"+
    "\2\262\117\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\1\20\1\0\1\22\2\0\1\13\7\0\35\13"+
    "\54\0\1\270\4\0\1\271\2\0\1\271\1\0\2\142"+
    "\61\0\27\267\1\344\1\345\74\267\30\272\1\346\1\347"+
    "\73\272\1\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\11\13\1\350\23\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\6\13\1\351\26\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\6\13\1\352\26\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\13\13\1\353"+
    "\1\13\1\354\17\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\4\13\1\355"+
    "\30\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\17\13\1\356\15\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\27\13\1\357\5\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\1\360\34\13\25\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\5\0\1\13\7\0\1\361\34\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\21\13\1\362\13\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\17\13\1\363\15\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\25\13\1\364"+
    "\7\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\13\13\1\365\21\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\13\13\1\366\21\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\11\13\1\367\23\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\13\13\1\370"+
    "\21\13\53\0\1\102\1\0\1\103\123\0\1\334\4\0"+
    "\1\335\2\0\1\335\1\0\2\232\61\0\27\333\1\371"+
    "\1\372\74\333\30\336\1\373\1\374\73\336\1\0\13\13"+
    "\2\0\3\13\1\0\1\13\1\0\3\13\1\106\1\0"+
    "\1\107\2\0\1\13\7\0\35\13\24\0\27\341\1\375"+
    "\1\376\74\341\30\342\1\377\1\u0100\73\342\1\115\13\343"+
    "\1\115\1\0\3\343\1\115\1\343\1\115\3\343\1\0"+
    "\1\254\2\0\1\115\2\343\4\115\1\0\1\115\35\343"+
    "\24\115\27\267\1\u0101\1\u0102\221\267\155\272\1\u0103\1\u0104"+
    "\73\272\1\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\16\13\1\u0105\16\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\4\13\1\u0106\30\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\6\13\1\u0107\26\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\6\13\1\u0108"+
    "\26\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\21\13\1\u0109\13\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\15\13\1\u010a\17\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\3\13\1\u010b\31\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\15\13\1\u010c"+
    "\17\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\4\13\1\u010d\30\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\12\13\1\u010e\4\13\1\u010f\15\13\24\0"+
    "\27\333\1\u0110\1\u0111\221\333\155\336\1\u0112\1\u0113\73\336"+
    "\27\341\1\u0114\1\376\221\341\155\342\1\377\1\u0115\73\342"+
    "\27\267\1\u0116\1\u0102\74\267\30\272\1\u0103\1\u0116\73\272"+
    "\1\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\5\0\1\13\7\0\4\13\1\u0117\30\13\25\0\13\13"+
    "\2\0\3\13\1\0\1\13\1\0\3\13\5\0\1\13"+
    "\7\0\30\13\1\u0118\4\13\25\0\13\13\2\0\3\13"+
    "\1\0\1\13\1\0\3\13\5\0\1\13\7\0\21\13"+
    "\1\u0119\13\13\24\0\27\333\1\u011a\1\u0111\74\333\30\336"+
    "\1\u0112\1\u011a\73\336\27\341\1\u011b\1\376\74\341\30\342"+
    "\1\377\1\u011b\73\342\30\0\1\u011c\4\0\1\u011d\2\0"+
    "\1\u011d\1\0\2\u011e\62\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\3\13\1\u011f"+
    "\31\13\25\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\5\0\1\13\7\0\4\13\1\u0120\30\13\25\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\5\0"+
    "\1\13\7\0\15\13\1\u0121\17\13\25\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\5\0\1\13\7\0"+
    "\13\13\1\u0122\21\13\25\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\5\0\1\13\7\0\10\13\1\u0123"+
    "\24\13\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\11\1\1\11\1\1\3\11\1\1\4\11"+
    "\34\1\11\11\4\1\1\11\12\1\2\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\1\4\0\2\1\2\11\3\1"+
    "\1\11\3\1\1\11\37\1\3\11\1\1\2\11\1\1"+
    "\5\11\1\1\2\11\1\1\1\0\3\1\1\11\12\1"+
    "\2\0\1\11\2\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\1\0"+
    "\33\1\4\11\1\0\2\1\1\11\1\0\2\1\1\11"+
    "\3\1\1\0\2\1\1\0\21\1\1\0\2\1\11\0"+
    "\13\1\6\0\5\1\2\11\1\0\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//private final YaLangLexerFStringHelper fStringHelper = new YaLangLexerFStringHelper(this);

private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YaLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return YaLangTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 112: break;
          case 2: 
            { return YaLangTokenTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 113: break;
          case 3: 
            { return YaLangTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 114: break;
          case 4: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 115: break;
          case 5: 
            { return YaLangTokenTypes.DOT;
            } 
            // fall through
          case 116: break;
          case 6: 
            { return YaLangTokenTypes.MINUS;
            } 
            // fall through
          case 117: break;
          case 7: 
            { if (zzInput == YYEOF && zzStartRead == 0) return YaLangTokenTypes.DOCSTRING;
                                 else return YaLangTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 118: break;
          case 8: 
            { return YaLangTokenTypes.BACKSLASH;
            } 
            // fall through
          case 119: break;
          case 9: 
            { return YaLangTokenTypes.LBRACE;
            } 
            // fall through
          case 120: break;
          case 10: 
            { return YaLangTokenTypes.RBRACE;
            } 
            // fall through
          case 121: break;
          case 11: 
            { return YaLangTokenTypes.SPACE;
            } 
            // fall through
          case 122: break;
          case 12: 
            { return YaLangTokenTypes.COLON;
            } 
            // fall through
          case 123: break;
          case 13: 
            { return YaLangTokenTypes.TAB;
            } 
            // fall through
          case 124: break;
          case 14: 
            { return YaLangTokenTypes.FORMFEED;
            } 
            // fall through
          case 125: break;
          case 15: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 126: break;
          case 16: 
            { return YaLangTokenTypes.AND_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 17: 
            { return YaLangTokenTypes.PLUS;
            } 
            // fall through
          case 128: break;
          case 18: 
            { return YaLangTokenTypes.EQ;
            } 
            // fall through
          case 129: break;
          case 19: 
            { return YaLangTokenTypes.MULT;
            } 
            // fall through
          case 130: break;
          case 20: 
            { return YaLangTokenTypes.AT;
            } 
            // fall through
          case 131: break;
          case 21: 
            { return YaLangTokenTypes.DIV;
            } 
            // fall through
          case 132: break;
          case 22: 
            { return YaLangTokenTypes.PERC;
            } 
            // fall through
          case 133: break;
          case 23: 
            { return YaLangTokenTypes.AND;
            } 
            // fall through
          case 134: break;
          case 24: 
            { return YaLangTokenTypes.OR;
            } 
            // fall through
          case 135: break;
          case 25: 
            { return YaLangTokenTypes.XOR;
            } 
            // fall through
          case 136: break;
          case 26: 
            { return YaLangTokenTypes.GT;
            } 
            // fall through
          case 137: break;
          case 27: 
            { return YaLangTokenTypes.LT;
            } 
            // fall through
          case 138: break;
          case 28: 
            { return YaLangTokenTypes.TILDE;
            } 
            // fall through
          case 139: break;
          case 29: 
            { return YaLangTokenTypes.LPAR;
            } 
            // fall through
          case 140: break;
          case 30: 
            { return YaLangTokenTypes.RPAR;
            } 
            // fall through
          case 141: break;
          case 31: 
            { return YaLangTokenTypes.LBRACKET;
            } 
            // fall through
          case 142: break;
          case 32: 
            { return YaLangTokenTypes.RBRACKET;
            } 
            // fall through
          case 143: break;
          case 33: 
            { return YaLangTokenTypes.COMMA;
            } 
            // fall through
          case 144: break;
          case 34: 
            { return YaLangTokenTypes.TICK;
            } 
            // fall through
          case 145: break;
          case 35: 
            { return YaLangTokenTypes.SEMICOLON;
            } 
            // fall through
          case 146: break;
          case 36: 
            { yypushback(1); yybegin(YYINITIAL);
            } 
            // fall through
          case 147: break;
          case 37: 
            { return YaLangTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 148: break;
          case 38: 
            { if (zzInput == YYEOF) return YaLangTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return YaLangTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 149: break;
          case 39: 
            { return YaLangTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 150: break;
          case 40: 
            { return YaLangTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 151: break;
          case 41: 
            { return YaLangTokenTypes.FSTRING_TEXT;
            } 
            // fall through
          case 152: break;
          case 42: 
            { return YaLangTokenTypes.FSTRING_FRAGMENT_TYPE_CONVERSION;
            } 
            // fall through
          case 153: break;
          case 43: 
            { return YaLangTokenTypes.FLOAT_LITERAL;
            } 
            // fall through
          case 154: break;
          case 44: 
            { return YaLangTokenTypes.IMAGINARY_LITERAL;
            } 
            // fall through
          case 155: break;
          case 45: 
            { return YaLangTokenTypes.MINUSEQ;
            } 
            // fall through
          case 156: break;
          case 46: 
            { return YaLangTokenTypes.RARROW;
            } 
            // fall through
          case 157: break;
          case 47: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.SINGLE_QUOTED_STRING;
return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 158: break;
          case 48: 
            { return YaLangTokenTypes.NE;
            } 
            // fall through
          case 159: break;
          case 49: 
            { return YaLangTokenTypes.OR_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 50: 
            { return YaLangTokenTypes.IN_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 51: 
            { return YaLangTokenTypes.FROM_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 52: 
            { return YaLangTokenTypes.WITH_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 53: 
            { return YaLangTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 54: 
            { return YaLangTokenTypes.NOT_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 55: 
            { return YaLangTokenTypes.PLUSEQ;
            } 
            // fall through
          case 166: break;
          case 56: 
            { return YaLangTokenTypes.EQEQ;
            } 
            // fall through
          case 167: break;
          case 57: 
            { return YaLangTokenTypes.MULTEQ;
            } 
            // fall through
          case 168: break;
          case 58: 
            { return YaLangTokenTypes.EXP;
            } 
            // fall through
          case 169: break;
          case 59: 
            { return YaLangTokenTypes.ATEQ;
            } 
            // fall through
          case 170: break;
          case 60: 
            { return YaLangTokenTypes.DIVEQ;
            } 
            // fall through
          case 171: break;
          case 61: 
            { return YaLangTokenTypes.FLOORDIV;
            } 
            // fall through
          case 172: break;
          case 62: 
            { return YaLangTokenTypes.PERCEQ;
            } 
            // fall through
          case 173: break;
          case 63: 
            { return YaLangTokenTypes.ANDEQ;
            } 
            // fall through
          case 174: break;
          case 64: 
            { return YaLangTokenTypes.OREQ;
            } 
            // fall through
          case 175: break;
          case 65: 
            { return YaLangTokenTypes.XOREQ;
            } 
            // fall through
          case 176: break;
          case 66: 
            { return YaLangTokenTypes.GE;
            } 
            // fall through
          case 177: break;
          case 67: 
            { return YaLangTokenTypes.GTGT;
            } 
            // fall through
          case 178: break;
          case 68: 
            { return YaLangTokenTypes.LE;
            } 
            // fall through
          case 179: break;
          case 69: 
            { return YaLangTokenTypes.NE_OLD;
            } 
            // fall through
          case 180: break;
          case 70: 
            { return YaLangTokenTypes.LTLT;
            } 
            // fall through
          case 181: break;
          case 71: 
            { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 182: break;
          case 72: 
            { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.COLON;
            } 
            // fall through
          case 183: break;
          case 73: 
            { if (zzInput == YYEOF && zzStartRead == 0) return YaLangTokenTypes.DOCSTRING;
                                 else return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 184: break;
          case 74: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 185: break;
          case 75: 
            { return YaLangTokenTypes.ELIF_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 76: 
            { return YaLangTokenTypes.ASSERT_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 77: 
            { return YaLangTokenTypes.RAISE_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 78: 
            { yybegin(IN_DOCSTRING_OWNER); return YaLangTokenTypes.CLASS_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 79: 
            { return YaLangTokenTypes.PASS_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 80: 
            { return YaLangTokenTypes.AS_KEYWORD;
            } 
            // fall through
          case 191: break;
          case 81: 
            { return YaLangTokenTypes.DEL_KEYWORD;
            } 
            // fall through
          case 192: break;
          case 82: 
            { return YaLangTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 83: 
            { return YaLangTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 84: 
            { return YaLangTokenTypes.EXCEPT_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 85: 
            { return YaLangTokenTypes.EXPEQ;
            } 
            // fall through
          case 196: break;
          case 86: 
            { return YaLangTokenTypes.FLOORDIVEQ;
            } 
            // fall through
          case 197: break;
          case 87: 
            { return YaLangTokenTypes.GTGTEQ;
            } 
            // fall through
          case 198: break;
          case 88: 
            { return YaLangTokenTypes.LTLTEQ;
            } 
            // fall through
          case 199: break;
          case 89: 
            { if (zzInput == YYEOF) return YaLangTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 200: break;
          case 90: 
            { yypushback(getSpaceLength(yytext())); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 201: break;
          case 91: 
            { return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 202: break;
          case 92: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 203: break;
          case 93: 
            { return YaLangTokenTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 204: break;
          case 94: 
            { return YaLangTokenTypes.LAMBDA_KEYWORD;
            } 
            // fall through
          case 205: break;
          case 95: 
            { return YaLangTokenTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 206: break;
          case 96: 
            { return YaLangTokenTypes.AWAIT_KEYWORD;
            } 
            // fall through
          case 207: break;
          case 97: 
            { return YaLangTokenTypes.TRY_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 98: 
            { return YaLangTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 209: break;
          case 99: 
            { return YaLangTokenTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 100: 
            { yybegin(IN_DOCSTRING_OWNER); return YaLangTokenTypes.DEF_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 101: 
            { return YaLangTokenTypes.FINALLY_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 102: 
            { return YaLangTokenTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 103: 
            { return YaLangTokenTypes.YIELD_KEYWORD;
            } 
            // fall through
          case 214: break;
          case 104: 
            { return YaLangTokenTypes.IS_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 105: 
            { return YaLangTokenTypes.NONE_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 106: 
            { return YaLangTokenTypes.GLOBAL_KEYWORD;
            } 
            // fall through
          case 217: break;
          case 107: 
            { return YaLangTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 218: break;
          case 108: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 219: break;
          case 109: 
            { return YaLangTokenTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 220: break;
          case 110: 
            { return YaLangTokenTypes.NONLOCAL_KEYWORD;
            } 
            // fall through
          case 221: break;
          case 111: 
            { return YaLangTokenTypes.ASYNC_KEYWORD;
            } 
            // fall through
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
