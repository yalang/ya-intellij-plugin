{
  parserClass="org.yalang.parser.YaLangParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="YaLang"
  psiImplClassSuffix="Impl"
  psiPackage="org.yalang.psi"
  psiImplPackage="org.yalang.psi.impl"

  elementTypeHolderClass="org.yalang.psi.YaLangTypes"
  elementTypeClass="org.yalang.psi.YaLangElementType"
  tokenTypeClass="org.yalang.psi.YaLangTokenType"

  psiImplUtilClass="org.yalang.psi.impl.YaLangPsiImplUtil"

  tokens=[
    TRUE_KEYWORD='صحيح'
    FALSE_KEYWORD='زائف'
    NONE_KEYWORD='لااحد'
    ASYNC_KEYWORD='غيرمتزامن'
    AS_KEYWORD='مثل'
    AWAIT_KEYWORD='ترقب'
    WITH_KEYWORD='مع'
    NONLOCAL_KEYWORD='غيرمحلي'

    AND_KEYWORD='و'
    ASSERT_KEYWORD='أكد'
    BREAK_KEYWORD='اكسر'
    CLASS_KEYWORD='صنف'
    CONTINUE_KEYWORD='استمر'
    DEF_KEYWORD='وظيفة'
    DEL_KEYWORD='حذف'
    ELIF_KEYWORD='ولو'
    ELSE_KEYWORD='آخر'
    EXCEPT_KEYWORD='إلا'
    FINALLY_KEYWORD='أخيرا'
    FOR_KEYWORD='لأن'
    FROM_KEYWORD='من'
    GLOBAL_KEYWORD='عالمي'
    IF_KEYWORD='لو'
    IMPORT_KEYWORD='استيراد'
    IN_KEYWORD='في'
    IS_KEYWORD='يساوي'
    LAMBDA_KEYWORD='امدا'
    NOT_KEYWORD='لا'
    OR_KEYWORD='أو'
    PASS_KEYWORD='مرر'
    RAISE_KEYWORD='رفع'
    RETURN_KEYWORD='إرجع'
    TRY_KEYWORD='حاول'
    WHILE_KEYWORD='بينما'
    YIELD_KEYWORD='محصول'

    PLUSEQ='+='
    MINUSEQ='-='
    EXPEQ='**='
    MULTEQ='*='
    ATEQ='@='
    FLOORDIVEQ='//='
    DIVEQ='/='
    PERCEQ='٪='
    ANDEQ='&='
    OREQ='|='
    XOREQ='^='
    GTGTEQ='>>='
    LTLTEQ='<<='
    LTLT='<<'
    GTGT='>>'
    EXP='**'
    FLOORDIV='//'
    LE='<='
    GE='>='
    EQEQ='=='
    NE='!='
    NE_OLD='<>'
    RARROW='->'
    PLUS='+'
    MINUS='-'
    MULT='*'
    DIV='/'
    PERC='٪'
    AND='&'
    OR='|'
    XOR='^'
    TILDE='~'
    LT='<'
    GT='>'
    LPAR='('
    RPAR=')'
    LBRACKET='['
    RBRACKET=']'
    LBRACE='{'
    RBRACE='}'
    AT='@'
    COMMA='،'
    COLON=':'

    DOT='.'
    TICK='`'
    EQ='='
    SEMICOLON='؛'
  ]
}

yaLangFile ::= item_*

private item_ ::= (property|COMMENT|CRLF|single_input|file_input|eval_input)

property ::= (KEY? SEPARATOR VALUE?) | KEY {methods=[getKey getValue]}

// Start symbols for the grammar:
//       single_input is a single interactive statement;
//       file_input is a module or sequence of commands read from an input file;
//       eval_input is the input for the eval() functions.
// NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input ::= NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input ::= (NEWLINE | stmt)* ENDMARKER
eval_input ::= testlist NEWLINE* ENDMARKER

decorator ::= '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators ::= decorator+
decorated ::= decorators (classdef | funcdef | async_funcdef)

async_funcdef ::= ASYNC_KEYWORD funcdef
funcdef ::= DEF_KEYWORD NAME parameters ['->' test] ':' suite

parameters ::= '(' [typedargslist] ')'
typedargslist ::= (tfpdef ['=' test] (',' tfpdef ['=' test])* [',' [
        '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]
      | '**' tfpdef [',']]]
  | '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]
  | '**' tfpdef [','])
tfpdef ::= NAME [':' test]
varargslist ::= (vfpdef ['=' test] (',' vfpdef ['=' test])* [',' [
        '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]
      | '**' vfpdef [',']]]
  | '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]
  | '**' vfpdef [',']
)
vfpdef ::= NAME

stmt ::= simple_stmt | compound_stmt
simple_stmt ::= small_stmt ('؛' small_stmt)* ['؛'] NEWLINE
small_stmt ::= (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
expr_stmt ::= testlist_star_expr (annassign | augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist_star_expr))*)
annassign ::= ':' test ['=' test]
testlist_star_expr ::= (test|star_expr) (',' (test|star_expr))* [',']
augassign ::= ('+=' | '-=' | '*=' | '@=' | '/=' | '٪=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')
// For normal and annotated assignments, additional restrictions enforced by the interpreter
del_stmt ::= DEL_KEYWORD exprlist
pass_stmt ::= PASS_KEYWORD
flow_stmt ::= break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt ::= BREAK_KEYWORD
continue_stmt ::= CONTINUE_KEYWORD
return_stmt ::= RETURN_KEYWORD [testlist]
yield_stmt ::= yield_expr
raise_stmt ::= RAISE_KEYWORD [test [FROM_KEYWORD test]]
import_stmt ::= import_name | import_from
import_name ::= IMPORT_KEYWORD dotted_as_names
// note below ::= the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
import_from ::= (FROM_KEYWORD (('.' | '...')* dotted_name | ('.' | '...')+)
              IMPORT_KEYWORD ('*' | '(' import_as_names ')' | import_as_names))
import_as_name ::= NAME ['as' NAME]
dotted_as_name ::= dotted_name ['as' NAME]
import_as_names ::= import_as_name (',' import_as_name)* [',']
dotted_as_names ::= dotted_as_name (',' dotted_as_name)*
dotted_name ::= NAME ('.' NAME)*
global_stmt ::= GLOBAL_KEYWORD NAME (',' NAME)*
nonlocal_stmt ::= NONLOCAL_KEYWORD NAME (',' NAME)*
assert_stmt ::= ASSERT_KEYWORD test [',' test]

compound_stmt ::= if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt
async_stmt ::= ASYNC_KEYWORD (funcdef | with_stmt | for_stmt)
if_stmt ::= IF_KEYWORD test ':' suite (ELIF_KEYWORD test ':' suite)* [ELSE_KEYWORD ':' suite]
while_stmt ::= WHILE_KEYWORD test ':' suite [ELSE_KEYWORD ':' suite]
for_stmt ::= FOR_KEYWORD exprlist IN_KEYWORD testlist ':' suite [ELSE_KEYWORD ':' suite]
try_stmt ::= (TRY_KEYWORD ':' suite
           ((except_clause ':' suite)+
            [ELSE_KEYWORD ':' suite]
            [FINALLY_KEYWORD ':' suite] |
           FINALLY_KEYWORD ':' suite))
with_stmt ::= WITH_KEYWORD with_item (',' with_item)*  ':' suite
with_item ::= test [AS_KEYWORD expr]
// NB compile.c makes sure that the default except clause is last
except_clause ::= EXCEPT_KEYWORD [test [AS_KEYWORD NAME]]
suite ::= simple_stmt | NEWLINE INDENT stmt+ DEDENT

test ::= or_test [IF_KEYWORD or_test ELSE_KEYWORD test] | lambdef
test_nocond ::= or_test | lambdef_nocond
lambdef ::= LAMBDA_KEYWORD [varargslist] ':' test
lambdef_nocond ::= LAMBDA_KEYWORD [varargslist] ':' test_nocond
or_test ::= and_test (OR_KEYWORD and_test)*
and_test ::= not_test (AND_KEYWORD not_test)*
not_test ::= NOT_KEYWORD not_test | comparison
comparison ::= expr (comp_op expr)*
// <> isn't actually a valid comparison operator in Python. It's here for the
// sake of a __future__ import described in PEP 401 (which really works :-)
comp_op ::= '<'|'>'|'=='|'>='|'<='|'<>'|'!='|IN_KEYWORD|NOT_KEYWORD IN_KEYWORD|IS_KEYWORD|IS_KEYWORD NOT_KEYWORD
star_expr ::= '*' expr
expr ::= xor_expr ('|' xor_expr)*
xor_expr ::= and_expr ('^' and_expr)*
and_expr ::= shift_expr ('&' shift_expr)*
shift_expr ::= arith_expr (('<<'|'>>') arith_expr)*
arith_expr ::= term (('+'|'-') term)*
term ::= factor (('*'|'@'|'/'|'٪'|'//') factor)*
factor ::= ('+'|'-'|'~') factor | power
power ::= atom_expr ['**' factor]
atom_expr ::= [AWAIT_KEYWORD] atom trailer*
atom ::= ('(' [yield_expr|testlist_comp] ')' |
       '[' [testlist_comp] ']' |
       '{' [dictorsetmaker] '}' |
       NAME | NUMBER | STRING+ | '...' | NONE_KEYWORD | TRUE_KEYWORD | FALSE_KEYWORD)
testlist_comp ::= (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
trailer ::= '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist ::= subscript (',' subscript)* [',']
subscript ::= test | [test] ':' [test] [sliceop]
sliceop ::= ':' [test]
exprlist ::= (expr|star_expr) (',' (expr|star_expr))* [',']
testlist ::= test (',' test)* [',']
dictorsetmaker ::= ( ((test ':' test | '**' expr)
                   (comp_for | (',' (test ':' test | '**' expr))* [','])) |
                  ((test | star_expr)
                   (comp_for | (',' (test | star_expr))* [','])) )

classdef ::= CLASS_KEYWORD NAME ['(' [arglist] ')'] ':' suite

arglist ::= argument (',' argument)*  [',']

// The reason that keywords are test nodes instead of NAME is that using NAME
// results in an ambiguity. ast.c makes sure it's a NAME.
// "test '=' test" is really "keyword '=' test", but we have no such token.
// These need to be in a single rule to avoid grammar that is ambiguous
// to our LL(1) parser. Even though 'test' includes '*expr' in star_expr,
// we explicitly match '*' here, too, to give it proper precedence.
// Illegal combinations and orderings are blocked in ast.c:
// multiple (test comp_for) arguments are blocked; keyword unpackings
// that precede iterable unpackings are blocked; etc.
argument ::= ( test [comp_for] |
            test '=' test |
            '**' test |
            '*' test )

comp_iter ::= comp_for | comp_if
sync_comp_for ::= FOR_KEYWORD exprlist IN_KEYWORD or_test [comp_iter]
comp_for ::= [ASYNC_KEYWORD] sync_comp_for
comp_if ::= IF_KEYWORD test_nocond [comp_iter]

// not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl ::= NAME

yield_expr ::= YIELD_KEYWORD [yield_arg]
yield_arg ::= FROM_KEYWORD test | testlist